import groovy.xml.MarkupBuilder

apply plugin: 'com.android.application'
android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "net.argilo.busfollower"
        minSdkVersion 14
        targetSdkVersion 30
        versionCode 67
        versionName "2.2.1"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.core:core:1.3.2'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
}

task generateOCTranspoXML {
    def props = new Properties()
    props.load(new FileInputStream(rootProject.file("secure.properties")))

    ['debug', 'release'].each { type ->
        def sw = new StringWriter()
        def xml = new MarkupBuilder(sw)

        xml.resources() {
            string(name: "google_maps_key", translatable: "false", props.getProperty("${type}.google_maps_api_key"))
            string(name: "oc_transpo_application_id", translatable: "false", props.getProperty("${type}.oc_transpo_application_id"))
            string(name: "oc_transpo_application_key", translatable: "false", props.getProperty("${type}.oc_transpo_application_key"))
        }

        new File("app/src/${type}/res/values").mkdirs()
        def stringsFile = new File("app/src/${type}/res/values/api_keys.xml")
        stringsFile.write(sw.toString())
    }
}

task generatePNG(type:Exec) {
    inputs.dir '../svg'
    outputs.dir 'src/main/res'
    workingDir '..'
    commandLine 'python3', "svg${File.separator}gen_png.py"
}

task generateDB(type:Exec) {
    inputs.dir '../gtfs'
    outputs.file 'src/main/assets/db'
    workingDir '..'
    commandLine 'python3', "gtfs${File.separator}gen_db.py"
}

gradle.projectsEvaluated {
    preBuild.dependsOn('generateOCTranspoXML')
    preBuild.dependsOn('generatePNG')
    preBuild.dependsOn('generateDB')
}

def props = new Properties()
props.load(new FileInputStream(rootProject.file("secure.properties")))
android.signingConfigs.release.storeFile rootProject.file(props.getProperty("key.store"))
android.signingConfigs.release.storePassword props.getProperty("key.store.password")
android.signingConfigs.release.keyAlias props.getProperty("key.alias")
android.signingConfigs.release.keyPassword props.getProperty("key.alias.password")
